/// <reference path='_all.ts' />
var todos;
(function (todos) {
    var TodoItem = (function () {
        function TodoItem(title, completed) {
            this.title = title;
            this.completed = completed;
        }
        return TodoItem;
    })();
    todos.TodoItem = TodoItem;
})(todos || (todos = {}));
///<reference path='_all.ts' />
/// <reference path='_all.ts' />
var todos;
(function (todos_1) {
    'use strict';
    var TodoStorage = (function () {
        function TodoStorage() {
            this.STORAGE_ID = 'todos-angularjs-typescript';
        }
        TodoStorage.prototype.get = function () {
            return JSON.parse(localStorage.getItem(this.STORAGE_ID) || '[]');
        };
        TodoStorage.prototype.put = function (todos) {
            localStorage.setItem(this.STORAGE_ID, JSON.stringify(todos));
        };
        return TodoStorage;
    })();
    todos_1.TodoStorage = TodoStorage;
})(todos || (todos = {}));
///<reference path='_all.ts' />
var todos;
(function (todos) {
    'use strict';
    var TodoCtrl = (function () {
        function TodoCtrl($scope, $location, filterFilter) {
            var _this = this;
            this.$scope = $scope;
            this.$location = $location;
            this.filterFilter = filterFilter;
            this.todos = $scope.todos = [
                {
                    title: 'test001',
                    completed: false
                },
                {
                    title: 'test002',
                    completed: true
                }
            ];
            $scope.newTodo = '';
            $scope.editTodo = null;
            $scope.vm = this;
            $scope.$watch('todos', function () { return _this.onTodos(); }, true);
            $scope.$watch(function () { return $location.path(); }, function (path) { return _this.onPath(path); });
            if ($location.path() === '')
                $location.path('/');
            $scope.location = $location;
        }
        TodoCtrl.prototype.onPath = function (path) {
            console.log(path);
            this.$scope.statusFilter = (path === '/active') ? { completed: false } : (path === 'completed') ? { completed: true } : null;
        };
        TodoCtrl.prototype.onTodos = function () {
            this.$scope.remainingCount = this.filterFilter(this.todos, { completed: false }).length;
        };
        TodoCtrl.prototype.addTodo = function () {
            var newTodo = this.$scope.newTodo.trim();
            if (!newTodo) {
                return;
            }
            this.todos.push({ title: newTodo, completed: false });
            this.$scope.newTodo = '';
        };
        TodoCtrl.prototype.removeTodo = function (todo) {
            this.todos.splice(this.todos.indexOf(todo), 1);
        };
        TodoCtrl.prototype.editTodo = function (todo) {
            this.$scope.editTodo = todo;
        };
        TodoCtrl.prototype.doneEditTodo = function (todo) {
            this.$scope.editTodo = null;
            todo.title = todo.title.trim();
            if (!todo.title) {
                this.removeTodo(todo);
            }
        };
        TodoCtrl.prototype.checkAll = function () {
            this.$scope.todos.forEach(function (todo) {
                console.log(todo);
                todo.completed = true;
            });
        };
        TodoCtrl.$inject = [
            '$scope',
            '$location',
            'filterFilter'
        ];
        return TodoCtrl;
    })();
    todos.TodoCtrl = TodoCtrl;
})(todos || (todos = {}));
/// <reference path='_all.ts' />
var todos;
(function (todos) {
    'use strict';
    var todomvc = angular.module('todomvc', [])
        .controller('todoCtr', todos.TodoCtrl);
})(todos || (todos = {}));
/// <reference path='typings/jquery/jquery.d.ts' />
/// <reference path='typings/angularjs/angular.d.ts' />
/// <reference path='model.ts' />
/// <reference path='interfaces.ts' />
/// <reference path='TodoStorage.ts' />
/// <reference path='todoCtrl.ts' />
/// <reference path='application.ts' />

//# sourceMappingURL=data:application/json;base64,